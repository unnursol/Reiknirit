package s4;

import edu.princeton.cs.algs4.BreadthFirstDirectedPaths;
import edu.princeton.cs.algs4.Digraph;
import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;

public class SAP {
	
	
	
	
	// ------------------------------------------ SAP CLASS IMPLEMENTATION --------------------------------------------
	
	private Digraph graph;

	// constructor takes a digraph ( not necessarily a DAG )
	public SAP (Digraph G)
	{
		graph = G;
	}
	
	// length of shortest ancestral path between v and w; -1 if no such path
	public int length ( int v , int w)
	{
		verifyInput(v);
		verifyInput(w);
		BreadthFirstDirectedPaths bfsV = new BreadthFirstDirectedPaths(graph, v);
		BreadthFirstDirectedPaths bfsW = new BreadthFirstDirectedPaths(graph, w);
		
		int shortestPath = -1;
		for(int vertex = 0; vertex < graph.V(); vertex++)
		{
			//Checking if v and w have path to the same vertex and calculating the distance.
			if (bfsV.hasPathTo(vertex) && bfsW.hasPathTo(vertex)) {
				int currentDist = bfsV.distTo(vertex) + bfsW.distTo(vertex);
				//If the distance is shorter than the current shortestPath then we switch
				if (currentDist < shortestPath || shortestPath < 0 ) {
					shortestPath = currentDist;
				}
			}
		}
		return shortestPath;
	}
	
	// a shortest common common ancestor of v and w; -1 if no such path
	public int ancestor ( int v , int w){
		return -1;
	}
		
	// length of shortest ancestral path of vertex subsets A and B ; -1 if no such path
	public int length ( Iterable < Integer > A , Iterable < Integer > B){
		return 0;		
	}
		
	// a shortest common ancestor of vertex subsets A and B; -1 if no such path
	public int ancestor ( Iterable < Integer > A , Iterable < Integer > B){
		return 0;
	}
	
	//------------------------------         Help functions         ------------------------------
	
   private void verifyInput(int vertex) 
   {
	   if (vertex < 0 || vertex > graph.V() - 1) 
	   {
		  throw new java.lang.IndexOutOfBoundsException();      
	   }
   }
	   
   private void verifyInput(Iterable<Integer> vertex) 
   {
      for (Integer v : vertex) 
      {
         if (v < 0 || v > graph.V() - 1)
         {
        	 throw new java.lang.IndexOutOfBoundsException();   
         }
      }    
   }
	
	// do unit testing of this class
	public static void main ( String [] args ){	
		In in = new In(args[0]);
        Digraph G = new Digraph(in);
        SAP sap = new SAP(G);

        while (!StdIn.isEmpty()) {
            int v = StdIn.readInt();
            int w = StdIn.readInt();
            int length = sap.length(v, w);
            int ancestor = sap.ancestor(v, w);
            //StdOut.printf("length = %d, ancestor = %d\n", length, ancestor);
        }
	}

}
